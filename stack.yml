version: '3.8'
services:
  # 1. Service API (Backend)
  backend:
    image: flask-api:latest
    build:
      context: ./backend # Construit l'image depuis le dossier './backend'
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s # Attente de 10s pour la vérification de la santé après une MAJ
      restart_policy:
        condition: on-failure # Redémarre si le conteneur sort avec un code d'erreur
    ports:
      # Port interne au Swarm : le service est accessible via la Routing Mesh
      - "5000:5000" 
    environment:
      # Variables d'environnement pour la connexion à la base de données
      DB_HOST: db       # Utilise le nom de service 'db' (résolution DNS Swarm)
      DB_NAME: flask_db
      DB_USER: postgres
      REDIS_HOST: redis # Utilise le nom de service 'redis'
    secrets:
      - db_password # Injecte le secret dans le conteneur
    networks:
      - backend
    depends_on:
      - db
      - redis

  # 2. Service Base de Données (PostgreSQL)
  db:
    image: postgres:16-alpine
    deploy:
      replicas: 1
      placement:
        # CONTRAINTE CRUCIALE : Force le placement sur un Manager Node
        constraints:
          - node.role == manager
    environment:
      POSTGRES_DB: flask_db
      POSTGRES_USER: postgres
      # Le mot de passe est lu depuis le secret, non défini ici
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password 
    secrets:
      - db_password
    volumes:
      - db_data:/var/lib/postgresql/data # Persistance des données
    networks:
      - backend
    # Script d'initialisation SQL : création de la table et insertion de données
    command: >
      sh -c "
      docker-entrypoint.sh postgres &
      sleep 10 &&
      PGPASSWORD=$$(cat /run/secrets/db_password) psql -U postgres -d flask_db -c '
      CREATE TABLE IF NOT EXISTS items (
      id SERIAL PRIMARY KEY,
      name VARCHAR(255) NOT NULL,
      description TEXT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
      INSERT INTO items (name, description) VALUES
      (''Sample Item 1'', ''This is a sample item''),
      (''Sample Item 2'', ''Another sample item''),
      (''Sample Item 3'', ''Yet another sample'')
      ON CONFLICT DO NOTHING;
      ' || wait
      "

  # 3. Service Cache (Redis)
  redis:
    image: redis:7-alpine
    deploy:
      replicas: 2
    networks:
      - backend

  # 4. Service Interface Utilisateur (Frontend)
  frontend:
    image: flask-frontend:latest
    build:
      context: ./frontend
    deploy:
      replicas: 2
    ports:
      # Exposition publique : l'utilisateur accède à l'application via le port 8080
      - "8080:80" 
    networks:
      - frontend

# Définition des éléments externes/persistants
networks:
  backend:
    driver: overlay # Réseau isolé pour les services internes
  frontend:
    driver: overlay # Réseau pour le Frontend (potentiellement exposé)

volumes:
  db_data: # Volume persistant pour la base de données

secrets:
  db_password:
    external: true # Le secret doit être créé manuellement avant le déploiement